SConscript('''Netlister/SConscript
              Scripting/SConscript
              SimulatorDataModel/SConscript
              SimulatorGui/SConscript
              SimulatorTree/SConscript
              unitTest/SConscript
              Resources/SConscript'''.split())
     
------------

# If you build an executable, this is about the same as with the dynamic library:
bin1 = env.Program( 'SimulatorTest', 'TSimulatorTestsMain.cpp TSimulatorTest.cpp'.split() )

# At last for Cpp units, don't call installTargets but addCppUnit
env.addCppUnitTest( buildEnv, bin1 )

-------------

#ifndef TSIMULATORTEST_H_
#define TSIMULATORTEST_H_

// Unit test includes
#include <cppunit/TestFixture.h>
#include <cppunit/Test.h>
#include <cppunit/extensions/HelperMacros.h>

class TSimulatorTest : public CppUnit::TestFixture{

  CPPUNIT_TEST_SUITE(TSimulatorTest);
  /// Matrices test
  CPPUNIT_TEST(MassMatrixWithSideWallAnglesTest);
  
  
  CPPUNIT_TEST_SUITE_END();

public:

  /// Matrices test
  void MassMatrixWithSideWallAnglesTest();

  
};

#endif /* TSIMULATORTEST_H_ */



========


#include "AcisEngine.h"

#include <Log4cxxForMEMSp.h>
#include "log4cxx/propertyconfigurator.h"
#include <iostream>

using namespace std;
struct InitHook {
  InitHook() {
    cout << "Waiting...";
    cin.ignore();
  }
};

// Add this line to make the test stop and wait for a key press
//InitHook init;

#include "TSimulatorTest.h"

#if defined (CPPUNIT_DLL)
#include <cppunit/plugin/TestPlugIn.h>

// Implements all the plug-in stuff, WinMain...
CPPUNIT_PLUGIN_IMPLEMENT();

#else // not a plug-in

#include <cppunit/ui/text/TestRunner.h>

int main(int argc, char *argv[])
{
  // Point to configuration file for the LOG4CXX loggers
  log4cxx::PropertyConfigurator::configure(log4cxx::File("log4cxxSimulatorTests.conf"));
  // Add "--stop" in function call to attach a debugger
  if (argc > 1) {
    if (std::string(argv[1]) == "--stop") {
      std::cout << "Waiting...press a key to continue\n";
      std::cin.ignore();
    }
  }

  // Start the ACIS engine, acquire license token, before constructing the schematic
  AcisEngine::start();

  CppUnit::TextUi::TestRunner runner;
  runner.addTest(TSimulatorTest::suite());
  int returnValue = !runner.run();

  // Stop the ACIS engine, release license token, after schematic destruction
  AcisEngine::stop();

  return returnValue;
}

#endif // not a plug-in


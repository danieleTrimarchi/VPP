#Remember the macports command:  port contents packageName
			
# Import and clone the environement
Import('testEnv')
localEnv=testEnv.Clone()

# Get from the env the list of all objects used to 
# make the VPP
allObjects= localEnv['objList']

#Compile Debug mode
#env.Append(CCFLAGS= '-g')
#env.Append(CPPFLAGS ='-Wc++11-extensions')

# Warning: use of enumeration in a nested name specifier is a
#      C++11 extension [-Wc++11-extensions]

# ------- Add the third_parties -----------------
# Path for the globally installed libs
localEnv.getGlobalLibPath()


# Import the third_parties required for the build
import thirdParties
thirdParties.Eigen(localEnv)
thirdParties.NLOpt(localEnv)
thirdParties.IPOpt(localEnv)
thirdParties.Boost(localEnv)
thirdParties.CppUnit(localEnv)

# ----------------------------------------------


autotestsProgram= localEnv.Program('unitTest', Glob('*.cpp')+
							allObjects
								)

# Add a target 'runTest' that will ensure that it's built before running the test suite
test_alias = Alias('runTest', [autotestsProgram], autotestsProgram[0].path)

# Simply required.  Without it, 'test' is never considered out of date.
AlwaysBuild(test_alias)

#Remember the macports command:  port contents packageName
import subprocess
import sys

if 'makeDocs' in COMMAND_LINE_TARGETS:
	print 'Generating doxygen documentation...'
	proc= subprocess.Popen(['doxygen', 'doxiConfig'], cwd='/Users/dtrimarchi/VPP/main')
	
#-----

# Do some work to produce the version info
import time
from shutil import copyfile

currentBranch = (subprocess.check_output(["hg", "branch"]).rstrip())
currentRevNumber=(subprocess.check_output(["hg", "identify","-n"]).rstrip())
currentHash = (subprocess.check_output(["hg", "id","-i"]).rstrip())
buildDate = time.strftime("%c").rstrip()

# Get the full abs path of the file in the src tree and produce the 
# path of the same file with the timestamp
srcFile= str(File('Version.prototypeCpp').srcnode())
destFile= Dir('.').srcnode().abspath +'/Version.cpp'

# Copy the Version.prototypeCpp to Version.cpp
copyfile(srcFile,destFile)

# gsed currentBranch, currentHash, buildDate
newText=""
with open(destFile) as f:
	newText=f.read()
	newText= newText.replace("currentBranch_stringVar", currentBranch ) 
	newText= newText.replace("currentRevNumber_stringVar", currentRevNumber )
	newText= newText.replace("currentHash_stringVar", currentHash )
	newText= newText.replace("buildDate_stringVar", buildDate )
	f.close()

with open(destFile, "w") as f:
    f.write(newText)
    f.close()

# --- 

Import('releaseEnv')

# Get the environement 
localEnv = releaseEnv.Clone()

#Compile Debug mode
#env.Append(CCFLAGS= '-g')
#env.Append(CPPFLAGS ='-Wc++11-extensions')
localEnv.Append(LINKFLAGS ='-framework Accelerate -lm -ldl')

#warning: use of enumeration in a nested name specifier is a
#      C++11 extension [-Wc++11-extensions]

# List the subFolders
subFolders= [ 'exceptions', 'core' ] 

curDirAbsPath= Dir('.').srcnode().abspath

# First loop, build the subfolder include path
myCppPath= [ curDirAbsPath ]

for subdir in subFolders : 
	myCppPath.append(curDirAbsPath + "/" + subdir)

# Add the subfolder path to the CPPPATH of the localEnv
localEnv.Append( CPPPATH=myCppPath )

# ------- Add the third_parties -----------------
# Path for the globally installed libs
localEnv.getGlobalLibPath()
# ...EIGEN...
localEnv.getEigenIncludePath()
# ...PlPlot...
localEnv.getPlPlotIncludePath()
localEnv.getPlPlotLib()
# ...NlOpt...
localEnv.getNlOptIncludePath()
localEnv.getNLOptLibPath()
localEnv.getNLOptLib()
# ...IpOpt...
localEnv.getIpOptIncludePath()
localEnv.getIpOptLibPath()
localEnv.getIpOptLib()
# ...Boost...
localEnv.getBoostIncludePath()
# ...UMFPack...
localEnv.getUMFPackIncludePath()
localEnv.getUMFPackLibPath()
localEnv.getUMFPackLib()
# -----------------------------------------------

# List the objects required to build the program
allObj=[]

# Build sub-folders
for subdir in subFolders :
	o = SConscript('%s/SConscript' % subdir, {'env': localEnv})
	allObj.append(o)

# Build local objects 
allObj.append( localEnv.Object( Glob('*.cpp') ) )

# Build - this is like in scons man14.3, but VPPException.o remains in the 
# source build instead of being sent over to the build dir. Why? 
localEnv.Program('VPP', ['main.cxx'] + allObj )

# Also copy the input file 'variableFile.txt' to the build folder
srcFile= str(File('variableFile.txt').srcnode())
destFile=  localEnv['root_dir']+ '/' + localEnv['variant_dir'] +'/variableFile.txt'
copyfile(srcFile,destFile)

# Append the list of the objects to the env, in order for the 
# auto-test to find them
testEnv= localEnv.Clone()
testEnv.Append( objList = allObj )

# And now proceed to the subFolders
SConscript('''unitTest/SConscript'''.split(), {'testEnv': testEnv})


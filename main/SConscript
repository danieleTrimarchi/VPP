#Remember the macports command:  port contents packageName
import subprocess
from shutil import copyfile, rmtree
import sys
import os
from test._mock_backport import inplace
import shutil

Import('releaseEnv')

# Get the environement 
localEnv = releaseEnv.Clone()

# -- 
if 'run' in COMMAND_LINE_TARGETS:
	
	print "==>> localEnv.getAppPath(): ",localEnv.getAppPath()
	p = subprocess.Popen("open {}".format(localEnv.getAppPath()),shell=True) 
	p.wait()
	Exit(2)

if 'help' in COMMAND_LINE_TARGETS: 
 
	print '=================================================='
	print 'Available targets: '
	print 'scons                 : builds the program'
	print 'scons run             : runs the executable' 		
	print 'scons runTest         : runs the autotest'
	print 'scons makeDocs        : makes the Doxygen documentation' 
	print 'scons makeXCode       : makes the xCode debug project' 	
	print 'scons get_third_party : get and compile the required third parties'
	print ' '
	print 'Options: '
	print 'scons <target> -Q debug=1 : compiles/executes debug' 		
	print '=================================================='
	Exit(2)

# -- 

if 'makeDocs' in COMMAND_LINE_TARGETS:
	print 'Generating doxygen documentation...'
	p= subprocess.Popen(['doxygen', 'doxiConfig'], cwd='/Users/dtrimarchi/VPP/main')
	p.wait()
	Exit(2)

# -- 

if 'makeXCode' in COMMAND_LINE_TARGETS:
	print 'Making xCode project...'
	
	# Remember where we start and need to go back
	intialDir= os.getcwd()

	# 1_ cd to main and call qmake to generate a new xcode project	
	os.chdir(os.path.join(localEnv['root_dir' ],'main'))
  
	# 2_ Cleanup. Add try-except block in case the files are not present 
	try: 
		shutil.rmtree( os.path.join('..','xCodeBuild'),ignore_errors=True )
		shutil.rmtree('VPP.xcodeproj',ignore_errors=True)
	except:
		pass
 
  	# 3_ --> Write the file VPP.pro 
  	xcode= thirdParties.xCode(thirdPartyDict)
  	xcode.makeProjectFile(subFolders)
  	
	# 4_ get back to the original folder
	os.chdir(intialDir)

	Exit(2)

# --- 

if 'get_third_party' in COMMAND_LINE_TARGETS:

	from thirdPartyManager import thirdPartyCompile as tp
	ipOpt= tp.IpOptCompile()
	ipOpt.get(download=False)
	
	Exit(2)


# ------- List the subFolders of the current project -----------------

subFolders= ['qcustomplot',
			 'gui',
			 'gui/settingsWindow',
			 'exceptions', 
			 'core', 
			 'io',
			 'solvers', 
			 'results',
			 'utils',
			 'versioning' ] 

# ------- Add the third_parties -----------------

# Define a dictionary that will store the thirdParties
thirdPartyDict={}

from thirdPartyManager import thirdParties
thirdPartyDict['System']= thirdParties.System(localEnv)
thirdPartyDict['Eigen'] = thirdParties.Eigen(localEnv) 
thirdPartyDict['NLOpt'] = thirdParties.NLOpt(localEnv) 
thirdPartyDict['IPOpt'] = thirdParties.IPOpt(localEnv) 
thirdPartyDict['Boost'] = thirdParties.Boost(localEnv) 
thirdPartyDict['Qt'] 	= thirdParties.Qt(localEnv) 

# Give the list of the third_parties to the env, this way 
# it will be possible to direcly use the methods defined 
# in the third parties 
localEnv.Append( THIRDPARTYDICT=thirdPartyDict )

#Compile Debug mode
#env.Append(CCFLAGS= '-g')
#env.Append(CPPFLAGS ='-Wc++11-extensions')
localEnv.Append(LINKFLAGS ='-framework Accelerate -lm -ldl -Wno-inconsistent-missing-override -headerpad_max_install_names')
localEnv.Append(CPPFLAGS ='-Wno-inconsistent-missing-override')

#warning: use of enumeration in a nested name specifier is a
#      C++11 extension [-Wc++11-extensions]

curDirAbsPath= Dir('.').srcnode().abspath

# First loop, build the subfolder include path
myCppPath= [ curDirAbsPath ]

for subdir in subFolders : 
	myCppPath.append( os.path.join(curDirAbsPath,subdir) )

# Add the subfolder path to the CPPPATH of the localEnv
localEnv.Append( CPPPATH=myCppPath )

# -----------------------------------------------

# List the objects required to build the program
allObj=[]

# Build sub-folders
for subdir in subFolders :
	o = SConscript('%s/SConscript' % subdir, {'env': localEnv})
	allObj.append(o)

# Attempt the flag headerpad to use the full path to the libs..?
#localEnv.Append( LDFLAGS="headerpad_max_install_names") 

# Build - this is like in scons man14.3, but VPPException.o remains in the 
# source build instead of being sent over to the build dir. Why? 
vppExe= localEnv.Program(localEnv.getExecutableName(), ['main.cxx'] + allObj )

# Send the build to a convenient apple-style bundle folder structure 
# The target depends on the executable : make sure this is executed 
# whenever it is necessary!!
Depends( localEnv.makeAppFolderStructure(thirdPartyDict), vppExe )

# The VPP program is to be installed in the app folder structure, at least for MAC
installedExe= localEnv.Install( localEnv.getAppInstallDir(), vppExe )

# As the exe has been installed, modify it to use the local Qt frameworks
fixDynamicLibPath_command = Command('fixDynamicLibPath', [], localEnv.fixDynamicLibPath)
Depends( fixDynamicLibPath_command, installedExe )
Default( fixDynamicLibPath_command )

#--------------------	
# Clone the test env before adding the thirdParties
testEnv= localEnv.Clone()

# Append the list of the objects to the env, in order for the 
# auto-test to find them
testEnv.Append( objList = allObj )

# And now proceed to the subFolders
SConscript('''unitTest/SConscript'''.split(), {'testEnv': testEnv})


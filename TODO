-> TONIGHT : download qt offline and compile only the modules we require!
                              'QtCore',
                              'QtGui',
                              'QtWidgets',
                              'QtDataVisualization', 
                              'QtPrintSupport'
-> Recompile full Eigen with the docs and verify all tests still pass 

-> the test of ipOpt does not take advantage of the buildInfo. Correct!

-> Add a 'clean' target to cleanup the build space

-> the jacobian plot is broken, and it segv

-> Can I plot the Jacobian for awv, awa > initial? Apparently there is a nice segv... 

-> try run without settings. We get a number of errors (I think the solver keeps going) This is stupid: on Input error we should be stopping after the first one

-> the analysis count (solving step n of m) is broken : m is not the right number

-> Fix the permissions of /Users/dtrimarchi/VPP/xCodeBuild/qrcVPP.cpp. This appears to break the xCode build - Why? 
It might be that I need to refresh the generated source list. Not sure where this lives but it was out sync, and removing the list seems to help

- 
install_name_tool -change libboost_system.dylib @executable_path/libboost_system.dylib /Users/dtrimarchi/VPP/build/default/release/VPP.app/Contents/MacOS/libboost_filesystem.dylib 

install_name_tool -change libboost_filesystem.dylib @executable_path/libboost_filesystem.dylib /Users/dtrimarchi/VPP/build/default/release/VPP.app/Contents/MacOS/VPP

install_name_tool -change libboost_system.dylib @executable_path/libboost_system.dylib /Users/dtrimarchi/VPP/build/default/release/VPP.app/Contents/MacOS/VPP
- 


-> how to download from sourgeforce via Python script? 
-> https://sourceforge.net/projects/cppunit/files/latest/download
	but need to wait... not sure if my code does this. 


-> Export results to excel format. Simply use .csv formatting
- Is it possible to write in multiple tabs? 
 Ideally I would have vpp settings in the first tab, and the results in the second tab


-> Items should define a state vector, not a collection of variables!!

-> Items (resistance, wind, sails… ) are contained into vectors, the sync is only 		assured by the position of the items in the vector. Better would be a 	mechanism of dependencies, where each item updates its dependency. Not sure 	how to deal with multiple items depending on one item (i.e: InducedResistance 	and HeelingMoment both depend on AeroForce — we might end up updating some 		items twice. 
	To be investigated on UML!

-> Ask Stephane about the multiple environment warning 
  	
-> New definitions of the resistance with new version of the DYSHS


---

Questions: 
	See :
		SettingsItemBase* SettingsItemBounds::getItemMin() {
		return dynamic_cast<SettingsItemBase*>(child(0));
		}
	child is a method of Item, returning an Item. But the child is derived from
	SettingsItemBase, thus it has other methods I want to use, See for instance
	VariableParserGetVisitor::visit(SettingsItemBounds* pItem)
	wher I need to call getVariableName. This is a method for SettingsItemBase,
	not for Item. 
	Is there a better structure than dynamic_cast? 

	Also: 
		SettingsItemBase* SettingsModel::getRoot() const {
		return dynamic_cast<SettingsItemBase*>(VppItemModel::getRoot());
		}

	Also: 
		SettingsItemBase::settingsItemFactory
		Refactor the factory!
		I need to learn how to do a reasonable factory, this code is crap!
		
	Also: 
		I have chosen to templatize the items on their unit. This creates a lot 
		of problems when trying to convert the unit of an item. To do so I need 
		to instantiate a new item, which is akward. See for instance 
		SettingsItemBase* SettingsItem<Degrees>::convertToSI()
		Can I make a lighter design, with a non template item holding any unit?

---

- Exception in pathUtils if this is not MACOSX 

————

- …openCascade… Or other solid modelling tools?
	- Get pre-requisites : file:///Users/dtrimarchi/third_party/opencascade-7.1.0/doc/overview/html/occt_dev_guides__building_3rdparty_osx.html
	-> Tcl 8.5 : from http://www.tcl.tk/software/tcltk/download.html
	-> 

- Compute the derivative of a cubic spline, thus removing the FDs
- See RhinoAPI for getting LPP data



